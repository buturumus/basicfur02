# parts/views.py

import logging  # noqa
from django.http import JsonResponse
"""
# from django.http import HttpResponse
from django.http import Http404
from django.views.defaults import page_not_found
from datetime import datetime
from django.shortcuts import render
from django.template.loader import render_to_string
from django.views.generic import DetailView
"""
from django.views.generic.list import ListView  # noqa
from django.views.generic.base import TemplateView
from django.views.generic import CreateView
from django.views.generic import UpdateView
from django.views.generic import DeleteView
# app-level imports
from primepage.models import Partner
from primepage.models import Material
from primepage.models import MoneyEntry
from primepage.models import MoneyEntriesBunch
from primepage.models import TabStarter
from primepage.models import MultimodelMatrixSummary
from primepage.models import MultimodelMatrixNewOrEdit
from primepage.models import MoneyEntriesBunchMatrixNewOrEdit
from .forms import EditPartnerForm
from .forms import EditMaterialForm
# from .forms import EditMoneyEntryForm
from .forms import EditMoneyEntriesBunchForm
from primepage.lc_data import LcData


# Class for all kinds of tab parts
class ShownAnypart(TabStarter, LcData):
    request = None
    tab_cmd = None
    pk = 0

    def __init__(self, *args, **kwargs):
        self.request = kwargs['request']
        self.tab_cmd = kwargs['tab_cmd']
        self.pk = kwargs['pk']
        self.label_keys_to_localize = ()
        self.tabclick_keys_to_localize = ()
        # fill std.fields width init.consts.data set
        TabStarter.__init__(self, *args, **kwargs)

    def get_context_data(self, *args, **kwargs):
        context = {}
        context.update(TabStarter.get_context_data(self))
        context.update(LcData.get_context_data(self))
        # add  manually
        context.update({'pk': self.pk})
        #
        # logging.warning(context)
        #
        return context


# ######################################################
#
# Classes for simpliest tab parts: bodies and tab headers
#
# ######################################################


#
# All based on Template view


class ShownBodieOrHeaderAnymodel(TemplateView, ShownAnypart):

    def __init__(self, *args, **kwargs):
        TemplateView.__init__(self, *args, **kwargs)
        ShownAnypart.__init__(self, *args, **kwargs)
        self.tabclick_keys_to_localize = ('lc_tab_title', )

    def get_context_data(self, *args, **kwargs):
        context = TemplateView.get_context_data(self, *args, **kwargs)
        context.update(
            ShownAnypart.get_context_data(self, *args, **kwargs)
        )
        return context


class ShownTabheader(ShownBodieOrHeaderAnymodel):
    template_name = 'parts/shown_tabheader.html'


class ShownBodieSummaryAnymodel(ShownBodieOrHeaderAnymodel):
    template_name = 'parts/shown_bodie_summary_anymodel.html'

    def __init__(self, *args, **kwargs):
        ShownBodieOrHeaderAnymodel.__init__(self, *args, **kwargs)
        self.label_keys_to_localize = ('btn_f5', 'btn_close', )


class ShownBodieNewOrEditAnymodel(ShownBodieOrHeaderAnymodel):
    template_name = 'parts/shown_bodie_new_or_edit_anymodel.html'

    def __init__(self, *args, **kwargs):
        ShownBodieOrHeaderAnymodel.__init__(self, *args, **kwargs)
        self.label_keys_to_localize = ('btn_close_not_save', )


# ######################################################
#
# More complex classes - for matrixx tab part
#
# ######################################################


class ShownMatrixAnymodel(ShownAnypart):
    pass


#
# Summary-like matrixx, based on list view
#

class ShownMatrixSummaryAnymodel(ListView,
                                 ShownMatrixAnymodel,
                                 MultimodelMatrixSummary):
    template_name = 'parts/shown_matrix_summary_anymodel.html'

    def __init__(self, *args, **kwargs):
        ListView.__init__(self, *args, **kwargs)
        ShownMatrixAnymodel.__init__(self, *args, **kwargs)

    def get_context_data(self, *args, **kwargs):
        context = ListView.get_context_data(self, *args, **kwargs)
        context.update(
            ShownMatrixAnymodel.get_context_data(self, *args, **kwargs)
        )
        context.update(
            MultimodelMatrixSummary.get_context_data(
                self, *args,
                object_list=context['object_list'],
                **kwargs
            )
        )
        return context


class ShownMatrixSummaryPartner(ShownMatrixSummaryAnymodel):
    model = Partner


class ShownMatrixSummaryMaterial(ShownMatrixSummaryAnymodel):
    model = Material


class ShownMatrixSummaryMoneyEntry(ShownMatrixSummaryAnymodel):
    model = MoneyEntry


#
# Edit and New case's matrixx
#

# Common classes for both New-s and Edit-s

class ShownMatrixNewOrEditAnymodel(ShownMatrixAnymodel,
                                   MultimodelMatrixNewOrEdit):

    def __init__(self, *args, **kwargs):
        ShownMatrixAnymodel.__init__(self, *args, **kwargs)
        self.template_name = 'parts/shown_matrix_new_or_edit_anymodel.html'
        # move bottom buttons from bodie to form (== localize them in matrix)
        self.label_keys_to_localize = ('btn_save_close', 'btn_delete', )
        # get initial values from the model
        self.initial = self.model.get_new_or_edit_initials(self)

    def get_context_data(self, *args, **kwargs):
        context = ShownMatrixAnymodel.get_context_data(self, *args, **kwargs)
        return context

    # # common for 'new' and 'edit' saving procedure
    # def form_valid(self, form):
    #     # add keyvals written on backend side
    #     written_by_backend = self.model.get_written_by_backend(self.request)
    #     for field in written_by_backend:
    #         setattr(form.instance, field, written_by_backend[field])
    #     # save instance
    #     response = self.super_form_valid(form)
    #     return (
    #         JsonResponse({'pk': self.object.pk})
    #         if self.request.is_ajax() else response
    #     )

    # def form_valid(self, form):
    #     return self.render_to_response(self.get_context_data())


class ShownMatrixNewOrEditPartner:
    model = Partner
    form_class = EditPartnerForm


class ShownMatrixNewOrEditMaterial:
    model = Material
    form_class = EditMaterialForm


class ShownMatrixNewOrEditMoneyEntriesBunch:
    model = MoneyEntriesBunch
    form_class = EditMoneyEntriesBunchForm

    def __init__(self, *args, **kwargs):
        # extra button to localize
        self.label_keys_to_localize += ('edit_m_entry_details', )


#
# 'New' cases - based on Create view


class ShownMatrixNewAnymodel(CreateView, ShownMatrixNewOrEditAnymodel):

    def __init__(self, *args, **kwargs):
        ShownMatrixNewOrEditAnymodel.__init__(self, *args, **kwargs)
        CreateView.__init__(self, *args, **kwargs)
        # get New-only initial values from the model
        self.initial.update(self.model.get_new_initials(self))

    def get_context_data(self, *args, **kwargs):
        context = ShownMatrixNewOrEditAnymodel.get_context_data(
            self, *args, **kwargs)
        context.update(
            CreateView.get_context_data(self, *args, **kwargs)
        )
        context.update(
            MultimodelMatrixNewOrEdit.get_context_data(
                self, *args,
                object_keyvals={},  # empty for 'new'
                form=context['form'],
                **kwargs
            )
        )
        return context

    def extra_form_valid_jobs(self):
        pass

    def form_valid(self, form):
        # add keyvals written on backend side
        written_by_backend = self.model.get_written_by_backend(self.request)
        for field in written_by_backend:
            setattr(form.instance, field, written_by_backend[field])
        # save instance
        response = CreateView.form_valid(self, form)
        result = (
            JsonResponse({'pk': self.object.pk})
            if self.request.is_ajax() else response
        )
        # hook to do some extra jobs, i.e.for entries bunch
        self.extra_form_valid_jobs()
        # response
        return result

    def form_invalid(self, form):
        #
        # logging.warning('form_invalid')
        # logging.warning(form.errors)
        #
        return (
            JsonResponse({'pk': '-1'})
        )


class ShownMatrixNewPartner(ShownMatrixNewOrEditPartner,
                            ShownMatrixNewAnymodel):

    def __init__(self, *args, **kwargs):
        ShownMatrixNewAnymodel.__init__(self, *args, **kwargs)


class ShownMatrixNewMaterial(ShownMatrixNewOrEditMaterial,
                             ShownMatrixNewAnymodel):

    def __init__(self, *args, **kwargs):
        ShownMatrixNewAnymodel.__init__(self, *args, **kwargs)


class ShownMatrixNewMoneyEntriesBunch(ShownMatrixNewOrEditMoneyEntriesBunch,
                                      ShownMatrixNewAnymodel):

    def __init__(self, *args, **kwargs):
        ShownMatrixNewAnymodel.__init__(self, *args, **kwargs)
        ShownMatrixNewOrEditMoneyEntriesBunch.__init__(self, *args, **kwargs)
        self.template_name = (
            'parts/shown_matrix_edit_money_entries_bunch.html')

    # for non-looped template
    def get_context_data(self, *args, **kwargs):
        context = ShownMatrixNewOrEditAnymodel.get_context_data(
            self, *args, **kwargs)
        context.update(
            CreateView.get_context_data(self, *args, **kwargs)
        )
        # re-check if form exists in context
        form_kwargs = {}
        form_kwargs.update(kwargs)
        if 'form' not in form_kwargs:
            form_kwargs.update({'form': context['form']})
        context.update(
            # here
            MoneyEntriesBunchMatrixNewOrEdit.get_context_data(
                self, *args,
                object_keyvals={},  # empty for 'new'
                **form_kwargs
            )
        )
        return context

    # populate entered data to money entries
    def extra_form_valid_jobs(self):
        if not self.object.pk:
            return
        for dr_acc, cr_acc in zip(
            (self.object.dr_acc0, self.object.dr_acc1, self.object.dr_acc2),
            (self.object.cr_acc0, self.object.cr_acc1, self.object.cr_acc2),
        ):
            if not (dr_acc and cr_acc):
                continue
            # create new money entry instance
            money_entry = MoneyEntry()
            # copy bunch's vals to new separate money entries
            for the_field in MoneyEntry.MATRIX_CONSTS['edit']['show_keys']:
                if the_field in ('dr_acc', 'cr_acc'):
                    continue
                setattr(money_entry,
                        the_field,
                        getattr(self.object, the_field))
            money_entry.save()
        # delete bunch object
        #

#
# 'Edit' cases - based on Update view


class ShownMatrixEditAnymodel(UpdateView, ShownMatrixNewOrEditAnymodel):

    def __init__(self, *args, **kwargs):
        ShownMatrixNewOrEditAnymodel.__init__(self, *args, **kwargs)
        UpdateView.__init__(self, *args, **kwargs)

    def get_context_data(self, *args, **kwargs):
        context = ShownMatrixNewOrEditAnymodel.get_context_data(
            self, *args, **kwargs)
        context.update(
            UpdateView.get_context_data(self, *args, **kwargs)
        )
        context.update(
            MultimodelMatrixNewOrEdit.get_context_data(
                self, *args,
                object_keyvals=context['object'],  # got from update view
                form=context['form'],
                **kwargs
            )
        )
        return context

    def form_valid(self, form):
        # add keyvals written on backend side
        written_by_backend = self.model.get_written_by_backend(self.request)
        for field in written_by_backend:
            setattr(form.instance, field, written_by_backend[field])
        # save instance
        response = UpdateView.form_valid(self, form)
        return (
            JsonResponse({'pk': self.object.pk})
            if self.request.is_ajax() else response
        )


class ShownMatrixEditPartner(ShownMatrixNewOrEditPartner,
                             ShownMatrixEditAnymodel):

    def __init__(self, *args, **kwargs):
        ShownMatrixEditAnymodel.__init__(self, *args, **kwargs)


class ShownMatrixEditMaterial(ShownMatrixNewOrEditMaterial,
                              ShownMatrixEditAnymodel):

    def __init__(self, *args, **kwargs):
        ShownMatrixEditAnymodel.__init__(self, *args, **kwargs)


# # new/edit MoneyEntry
# class ShownMatrixNewOrEditMoneyEntry:
#     model = MoneyEntry
#     form_class = EditMoneyEntryForm
#
#
# class ShownMatrixNewMoneyEntry(ShownMatrixNewOrEditMoneyEntry,
#                                ShownMatrixNewAnymodel):
#
#     def __init__(self, *args, **kwargs):
#         ShownMatrixNewAnymodel.__init__(self, *args, **kwargs)
#         self.template_name = 'parts/shown_matrix_edit_money_entry.html'
#
#     # for non-looped template
#     def get_context_data(self, *args, **kwargs):
#         context = ShownMatrixNewOrEditAnymodel.get_context_data(
#             self, *args, **kwargs)
#         context.update(
#             CreateView.get_context_data(self, *args, **kwargs)
#         )
#         context.update(
#             # here
#             MoneyEntryMatrixEdit.get_context_data(
#                 self, *args,
#                 object_keyvals={},  # empty for 'new'
#                 form=context['form'],
#                 **kwargs
#             )
#         )
#         return context
#
#
# class ShownMatrixEditMoneyEntry(ShownMatrixNewOrEditMoneyEntry,
#                                 ShownMatrixEditAnymodel):
#
#     def __init__(self, *args, **kwargs):
#         ShownMatrixEditAnymodel.__init__(self, *args, **kwargs)
#         self.template_name = 'parts/shown_matrix_edit_money_entry.html'
#
#     # for non-looped template
#     def get_context_data(self, *args, **kwargs):
#         context = ShownMatrixNewOrEditAnymodel.get_context_data(
#             self, *args, **kwargs)
#         context.update(
#             UpdateView.get_context_data(self, *args, **kwargs)
#         )
#         context.update(
#             # here
#             MoneyEntryMatrixEdit.get_context_data(
#                 self, *args,
#                 object_keyvals=context['object'],  # got from update view
#                 form=context['form'],
#                 **kwargs
#             )
#         )
#         return context


#
# 'Delete' cases - based of Delete view


class ShownDelAnymodel(DeleteView, ShownAnypart):
    template_name = 'parts/yesno.html'
    success_url = '.'

    def __init__(self, *args, **kwargs):
        ShownAnypart.__init__(self, *args, **kwargs)
        UpdateView.__init__(self, *args, **kwargs)
        self.label_keys_to_localize = (
            'yesno_sure_question', 'yesno_no_answer', 'yesno_yes_answer',
        )

    def get_context_data(self, *args, **kwargs):
        context = ShownAnypart.get_context_data(self, *args, **kwargs)
        context.update(
            DeleteView.get_context_data(self, *args, **kwargs)
        )
        return context

    def delete(self, request, *args, **kwargs):
        pk = self.get_object().pk
        response = DeleteView.delete(self, request, *args, **kwargs)
        return (
            JsonResponse({'pk': pk})
            if self.request.is_ajax() else response
        )


class ShownDelPartner(ShownDelAnymodel):
    model = Partner


class ShownDelMaterial(ShownDelAnymodel):
    model = Material


class ShownDelMoneyEntry(ShownDelAnymodel):
    model = MoneyEntry


# ###

class ShownError(TemplateView):
    template_name = 'parts/shown_bodie_error.html'
    tab_cmd = None
    pk = 0


# ######################################################
#
#  View selection
#
# ######################################################

def selected_view(request, tab_cmd, part_stage, *args, **kwargs):
    # unwrap urlconf's vals: request, tab_cmd and part_stage as simple vars
    # and pk as a kwargs val - only it must be transferred with view'a kwargs
    #
    # tab bodie:
    # startstage for every tab load
    if part_stage == 'bodie':
        if tab_cmd in (
            'partners_list',
            'materials_list',
            'money_entries_log',
        ):
            view_class = ShownBodieSummaryAnymodel
        elif tab_cmd in (
            'pensil_partner',
            'pensil_material',
            'pensil_money_entry',
            'new_partner',
            'new_material',
            'cache_in',
            'cache_out',
        ):
            view_class = ShownBodieNewOrEditAnymodel
        else:
            view_class = ShownError
    #
    # tab header:
    # 2nd stage for every tab loading
    elif part_stage == 'tabheader':
        view_class = ShownTabheader
    #
    # tab matrix:
    # 3rd stage, could be done independent if reload an existing tab
    elif part_stage == 'matrix':
        if tab_cmd == 'partners_list':
            view_class = ShownMatrixSummaryPartner
        elif tab_cmd == 'materials_list':
            view_class = ShownMatrixSummaryMaterial
        elif tab_cmd == 'money_entries_log':
            view_class = ShownMatrixSummaryMoneyEntry
        elif tab_cmd in ('pensil_partner', 'new_partner'):
            view_class = ShownMatrixNewPartner if kwargs[
                'pk'] == 0 else ShownMatrixEditPartner
        elif tab_cmd in ('pensil_material', 'new_material'):
            view_class = ShownMatrixNewMaterial if kwargs[
                'pk'] == 0 else ShownMatrixEditMaterial
        elif tab_cmd in (
            'pensil_money_entry',
            'cache_in',
            'cache_out',
        ):
            view_class = ShownMatrixNewMoneyEntriesBunch if kwargs[
                'pk'] == 0 else ShownMatrixNewMoneyEntriesBunch
            # ShownMatrixEditMoneyEntry
        else:
            view_class = ShownError
    # to delete some model inst.
    elif part_stage == 'del':
        if tab_cmd == 'pensil_partner':
            view_class = ShownDelPartner
        elif tab_cmd == 'pensil_material':
            view_class = ShownDelMaterial
        elif tab_cmd == 'pensil_money_entry':
            view_class = ShownDelMoneyEntry
        else:
            view_class = ShownError
    else:
        view_class = ShownError
    # return view of selected class
    return view_class.as_view(
        request=request,
        tab_cmd=tab_cmd,
        pk=kwargs['pk']
    )(request, *args, **kwargs)

